# Security Frameworks by SEAL

> Comprehensive security framework documentation for Web3 projects and blockchain security best practices.

import { TagList } from '../../../components/tags/TagList'
import { AttributionList } from '../../../components/attribution/AttributionList'
import { TagProvider } from '../../../components/tags/TagContext'
import { TagFilter } from '../../../components/tags/TagFilter'

<TagProvider>
  ## 1. Core Awareness Principles

  <TagFilter />

  <TagList tags={frontmatter.tags} />

  ***

  <AttributionList contributors={frontmatter.contributors} />

  > üîë **Key Takeaway**: Security awareness is built on fundamental principles like threat recognition, risk assessment, and zero trust verification. These principles form the foundation of a security-conscious culture where every individual plays a vital role in protecting organizational assets.

  ### Key concepts

  * **Threat Recognition**:
    Understand that threats come in various forms‚Äîphishing, social engineering, malware, and insider risks. For instance, a social media message urging immediate action might be a scam designed to exploit urgency.

  * **Risk Perception**:
    Assessing risk means evaluating both the likelihood of an attack and the potential impact. For example, if you frequently receive messages from unknown sources on a platform like Twitter, you should view these interactions with increased skepticism.

  * **Zero Trust Mindset**:
    Always verify before trusting. Even messages from familiar contacts should be confirmed if they involve unexpected requests or sensitive information.

  * **Filtering Credible Information**:
    In an era of information overload, it's critical to identify and rely on reputable sources. This means following established security blogs, official alerts from cybersecurity agencies, or verified community channels.

  * **Organizational Responsibility**:
    Security is a shared responsibility that requires commitment at all levels of the organization. Leadership must demonstrate strong commitment by prioritizing and investing in security initiatives, while every team member should understand their role in maintaining security.

  > **Real-World Example**: A company might receive a seemingly routine email from a "vendor" requesting updated banking details. An employee with a strong zero trust mindset will independently verify the request through known contact numbers or an established internal process, thereby avoiding a potential fraud.
</TagProvider>

***


import { TagList } from '../../../components/tags/TagList'
import { AttributionList } from '../../../components/attribution/AttributionList'
import { TagProvider } from '../../../components/tags/TagContext'
import { TagFilter } from '../../../components/tags/TagFilter'

<TagProvider>
  ## Awareness

  <TagList tags={frontmatter.tags} />

  <AttributionList contributors={frontmatter.contributors} />

  Building a security-conscious culture is fundamental to protecting Web3 projects and organizations. Security awareness goes beyond tools and technologies‚Äîit's about fostering the right mindset, behaviors, and practices across your entire team.

  ### Core Principles

  #### üéØ Risk Recognition

  Understanding that security threats are constantly evolving and can come from unexpected sources.

  #### üß† Security Mindset

  Developing the habit of thinking like an attacker to better defend against threats.

  #### üìö Continuous Learning

  Staying informed about emerging threats, attack vectors, and defensive strategies.

  #### üë• Collective Responsibility

  Recognizing that security is everyone's responsibility, not just the security team's.

  ### Key Topics

  #### Understanding Threat Vectors

  Learn about the various ways attackers can compromise Web3 projects:

  * **Social Engineering**: Phishing, pretexting, and manipulation tactics
  * **Technical Attacks**: Smart contract vulnerabilities, key compromise, infrastructure attacks
  * **Supply Chain**: Compromised dependencies, malicious packages, insider threats
  * **Physical Security**: Hardware attacks, "rubber hose" cryptanalysis, travel risks

  #### Cultivating a Security-Aware Mindset

  Develop practices that make security second nature:

  * **Verification Before Trust**: Always verify before acting on requests
  * **Principle of Least Privilege**: Only grant necessary access and permissions
  * **Defense in Depth**: Layer multiple security controls
  * **Incident Response Preparation**: Know what to do when things go wrong

  #### Staying Informed & Continuous Learning

  Keep up with the rapidly evolving threat landscape:

  * **Threat Intelligence Sources**: Reliable feeds for security information
  * **Community Resources**: Discord servers, Twitter accounts, newsletters
  * **Training Programs**: Regular security education for your team
  * **Post-Incident Analysis**: Learning from security incidents (yours and others')

  ### Implementation Strategy

  #### For Individuals

  1. **Personal Security Audit**: Assess your current security practices
  2. **Tool Selection**: Choose and properly configure security tools
  3. **Routine Development**: Build security habits into daily workflows
  4. **Network Building**: Connect with the security community

  #### For Teams

  1. **Security Culture Assessment**: Understand current team security posture
  2. **Training Programs**: Implement regular security education
  3. **Incident Response Planning**: Prepare for when things go wrong
  4. **Regular Reviews**: Continuously evaluate and improve practices

  #### For Organizations

  1. **Security Policies**: Establish clear security guidelines and procedures
  2. **Awareness Campaigns**: Regular communication about security topics
  3. **Incident Response**: Formal processes for handling security events
  4. **Metrics and Measurement**: Track security awareness and behavior

  ### Common Pitfalls

  #### ‚ùå "It Won't Happen to Us"

  Every organization is a potential target. Overconfidence leads to poor security practices.

  #### ‚ùå Security Theater

  Implementing security measures that look good but provide little real protection.

  #### ‚ùå All-or-Nothing Thinking

  Security is a spectrum, not a binary state. Focus on continuous improvement.

  #### ‚ùå Blame Culture

  Punishing security mistakes discourages reporting and learning from incidents.

  ### Measuring Success

  #### Behavioral Indicators

  * Increased reporting of suspicious activities
  * Better password practices across the team
  * More security-conscious decision making
  * Proactive security questions in planning

  #### Technical Metrics

  * Reduced successful phishing attempts
  * Faster incident detection and response
  * Better compliance with security policies
  * Decreased security-related incidents

  ### Resources & Further Reading

  #### Essential Reading

  * **Security Engineering** by Ross Anderson
  * **The Art of Deception** by Kevin Mitnick
  * **Threat Modeling: Designing for Security** by Adam Shostack

  #### Community Resources

  * [SEAL Discord](https://discord.com/invite/securityalliance)
  * [Web3 Security Twitter Lists](https://twitter.com)
  * [Security Newsletters and Blogs](https://example.com)

  #### Training Platforms

  * Internal security workshops
  * Industry conference talks
  * Online security courses
  * Capture the Flag (CTF) events

  \:::warning Remember
  Security awareness is not a one-time training‚Äîit's an ongoing process that must evolve with the threat landscape.
  \:::

  ### Next Steps

  Ready to build a more security-aware organization? Start with:

  1. **Assess Current State**: Understand where your team stands today
  2. **Identify Key Risks**: Focus on the most relevant threats to your organization
  3. **Create Learning Plan**: Develop a structured approach to security education
  4. **Implement Gradually**: Start with high-impact, easy-to-implement practices

  \:::tip Start Today
  The best time to start building security awareness was yesterday. The second best time is now.
  \:::
</TagProvider>

***


import { TagList } from '../../../components/tags/TagList'
import { AttributionList } from '../../../components/attribution/AttributionList'
import { TagProvider } from '../../../components/tags/TagContext'
import { TagFilter } from '../../../components/tags/TagFilter'

<TagProvider>
  ## 2. Understanding Threat Vectors

  <TagFilter />

  <TagList tags={frontmatter.tags} />

  ***

  <AttributionList contributors={frontmatter.contributors} />

  > üîë **Key Takeaway**: Understanding the various ways attackers can target you and your organization is essential for effective defense. By recognizing common attack patterns like phishing, social engineering, and emerging threats in digital spaces, you can better protect yourself and your team from potential security breaches.

  ### 2.1. Traditional Attack Vectors

  #### 2.1.1. Social Engineering & Phishing

  * **Phishing Emails:**
    Look for red flags like misspellings, odd URLs, and urgent language.
    **Scenario Example:** An email that claims "Your account will be locked in 24 hours" but uses a suspicious domain.

  * **SMS & Messaging Scams:**
    Attackers may use text messages or direct social media messages to bypass email filters.
    **Scenario Example:** A text message that claims to be from a delivery service asking for a confirmation code.

  * **Voice Phishing (Vishing):**
    Phone calls that pretend to be from a trusted organization, often using spoofed caller IDs.
    **Scenario Example:** A staff member receives a voicemail warning about a potential security breach and instructing them to call a specific number immediately.

  * **Pretexting:**
    Attackers create a fabricated scenario to steal personal information or gain access.
    **Scenario Example:** Someone pretending to be a new contractor who needs urgent access to systems or information.

  * **Baiting:**
    Offering something enticing to entrap the victim.
    **Scenario Example:** Leaving infected USB drives in public places or offering free downloads that contain malware.

  * **Tailgating:**
    Physically following authorized personnel into restricted areas without proper credentials.
    **Scenario Example:** An unknown person following an employee through a secure door by claiming they forgot their access card.

  * **Shoulder Surfing:**
    Observing someone's screen, keyboard, or device to gather information.
    **Scenario Example:** A threat actor monitoring your screen in a shared co-working space to capture sensitive information or credentials.

  #### 2.1.2. Malware & Technical Attacks

  * **Ransomware:**
    Malicious software that encrypts files and demands payment for decryption.
    **Scenario Example:** An organization finds their critical files encrypted with a ransom note demanding cryptocurrency payment.

  * **Man-in-the-Middle Attacks:**
    Intercepting communications between two parties.
    **Scenario Example:** An attacker on a public Wi-Fi network intercepts unencrypted traffic to steal credentials.

  * **Credential Stuffing:**
    Using stolen username/password combinations to attempt access to multiple services.
    **Scenario Example:** After a data breach at one service, attackers try the same credentials on financial or email accounts.

  ### 2.2. Web3-Specific Threats

  #### 2.2.1. Crypto-Focused Attacks

  * **Crypto Drainers:**
    A common attack where a threat actor suggests users can participate in an airdrop by visiting a provided link. Unsuspecting users who click the link are directed to a counterfeit website, where they are asked to authenticate their wallet and sign a transaction. Once signed, the threat actor gains access to steal funds from the wallet.

  * **Rug Pulls:**
    In the context of web3 and cryptocurrencies, these scams typically involve fraudulent schemes designed to swindle individuals out of their digital assets. For example, an enticing new project may promise revolutionary technology and unprecedented returns. However, the project developers quickly vanish, leaving investors with worthless tokens and empty promises.

  * **Token Approval Exploits:**
    Attackers may trick users into approving smart contracts that give unlimited access to tokens in their wallet. These "allowances" permit the approved contract to transfer any amount of a specific token without further permission. Always verify what permissions you're granting when signing transactions and set specific approval limits when possible.

  #### 2.2.2. Smart Contract Vulnerabilities

  * **Reentrancy Attacks:**
    Exploiting a contract's execution flow to repeatedly withdraw funds.
    **Scenario Example:** A malicious contract calls back into the victim contract before the first execution is complete, draining funds with each call.

  * **Flash Loan Attacks:**
    Using uncollateralized loans to manipulate market prices and exploit vulnerabilities.
    **Scenario Example:** An attacker borrows a large amount of cryptocurrency, manipulates a price oracle, exploits a vulnerability, and repays the loan in a single transaction.

  ### 2.3. Common Indicators & Red Flags

  #### 2.3.1. Behavioral Cues

  * **Inconsistencies:**
    Look for changes in tone or style in communications from known contacts.
    **Scenario Example:** A normally formal manager sends a casual message with unexpected requests.

  * **Unusual Requests:**
    Requests for urgent transfers of money, sensitive information, or changes in process should always trigger caution.

  * **Environmental Anomalies:**
    Spotting unexpected logins or unfamiliar devices in account activity reports can indicate compromised accounts.

  #### 2.3.2. Technical Indicators

  * **Unexpected Authentication Prompts:**
    Sudden requests to re-authenticate without clear reason.
    **Scenario Example:** Being asked to provide credentials on a site you're already logged into.

  * **Browser Certificate Warnings:**
    Alerts about invalid or expired security certificates.
    **Scenario Example:** Your browser displays a warning that a connection is not secure when visiting a familiar website.

  * **Unusual System Behavior:**
    Slowdowns, crashes, or unexpected pop-ups.
    **Scenario Example:** Your computer suddenly runs significantly slower or displays unfamiliar advertisements.

  #### 2.3.3. Checklist for Suspicious Communications

  * Does the message contain spelling errors or unusual formatting?
  * Is the sender's email or username slightly different from the norm?
  * Are there requests for urgent action without proper verification channels?
  * Does the message create a sense of fear, urgency, or excitement?
  * Is there an unexpected attachment or link?
  * Does the request bypass normal security procedures?

  ### 2.4. Preventive Measures

  #### 2.4.1. General Security Practices

  * **Double-Check Requests:**
    Always verify the identity of individuals requesting sensitive information, especially if the request is unusual or urgent.
    **Scenario Example:** If you receive an email from your CEO asking for an urgent wire transfer, call them directly using a known phone number to confirm.

  * **Use Secure Channels:**
    Communicate through official channels and avoid sharing sensitive information over unsecured methods.
    **Scenario Example:** Use your organization's established communication platforms rather than responding to external email links.

  #### 2.4.2. Web3-Specific Protections

  * **Check & Remove Token Approvals:**
    Regularly check which smart contracts have approvals to handle funds in your wallet and revoke unnecessary approvals to improve your security posture.
    **Useful Tools:**
    * [Unrekt](https://app.unrekt.net/)
    * [Etherscan Token Approval Checker](https://etherscan.io/tokenapprovalchecker)

  * **Scrutinize Transaction Requests:**
    Never sign a transaction unless you are completely sure exactly what you are signing. Be especially skeptical of offers that seem too good to be true.

  * **Hardware Wallets for Critical Assets:**
    Use hardware wallets for storing significant cryptocurrency holdings.
    **Scenario Example:** Keeping your long-term investments on a hardware wallet while only maintaining small amounts in hot wallets for daily transactions.

  ***
</TagProvider>


import { TagProvider } from '../../../components/tags/TagContext'

<TagProvider>
  ## How to Navigate the Website

  Navigating the Security Frameworks by SEAL will be designed, in time, to be intuitive and
  user-friendly. We currently allow users to filter contents by role, but we're not quite there yet.
  Any feedback on how to improve the usage of frameworks in the future is appreciated.

  ### Categories

  The content is organized into different categories, each focusing on a specific aspect of security.
  Currently, we are under the introduction section, but you can explore the broader category of
  "Frameworks" below. Each framework is categorized to help you find relevant information quickly.

  ### Filtering by Profile

  This is currently being implemented, and we're currently looking for volunteers and collaborators
  for this specific task. The main objective is to allow users to filter the content by profile
  to focus on information relevant to their role within the organization. This feature allows them to
  bypass unnecessary reading and concentrate on what matters most.

  Example roles:

  * Developer
  * Executive
  * Security
  * Finance
  * Crypto
  * Management
  * Community
  * Non-Technical

  This targeted approach will ensure you get the most relevant information efficiently.
</TagProvider>


import { TagProvider } from '../../../components/tags/TagContext'

<TagProvider>
  ## Introduction to Frameworks

  Welcome to the Security Frameworks by Security Alliance (SEAL), a curated resource for those seeking knowledge in the realm of blockchain security. Our organization, a collective of dedicated security specialists, is on a mission to spread awareness and educate the community about best practices and potential pitfalls in Web3 security.

  ### Why We Created This Resource

  We have noticed a growing need to address the various challenges and issues facing our field, some of which include security threats not specifically aimed at Web3 infrastructure. Recognizing that information is abundant but not always easily accessible, we've compiled and organized existing resources from around the internet and generated new content specifically with this purpose in mind.

  ### Who Can Benefit

  Regardless of your background‚Äîwhether in Web2, Web3, or beyond‚Äîthese guidelines are open to all who seek to learn and contribute. We aim to establish a comprehensive, high-level security framework for Web3 projects, providing best practices to development teams throughout the lifecycle of their projects. Consider this a one-stop shop for everything related to Web3 security.

  ### How to Contribute

  Read our [Contribution Guide]() to learn how you can contribute to this project.

  ### Who We Are

  SEAL is a not-for-profit organization committed to enhancing security awareness, education, and specialized work as a public good for the Web3 ecosystem, its supporting technologies, and communities. Our efforts are driven by a shared desire to foster a safer, more informed digital landscape. We do this by designing innovative projects, engaging elite technologists, and coordinating on the social layer to ensure meaningful adoption.
</TagProvider>


import { TagProvider } from '../../../components/tags/TagContext'
import { TagFilter } from '../../../components/tags/TagFilter'
import { Callout } from 'vocs/components'

<TagProvider>
  ## Overview of Each Framework

  <Callout type="note">
    **Important Disclaimer**

    The frameworks presented in this documentation are living documents that evolve with the Web3 security landscape. They may undergo restructuring, updates, or modifications in the future to reflect emerging threats, new best practices, and community feedback. We recommend regularly checking for updates to ensure you're working with the most current security guidelines.
  </Callout>

  This document provides an overview of the various frameworks covered in the Security Frameworks by SEAL. Each framework addresses a specific aspect of Web3 security, providing best practices and guidelines to help secure your projects.

  ### Community Management

  This framework explores best practices for securing and managing online communities associated with Web3 projects, covering platforms like Discord, Twitter, Telegram, and Google. It focuses on establishing secure communication channels and community guidelines.

  ### Awareness

  This section covers strategies for fostering security awareness among team members and users of Web3 projects, including understanding threat vectors, cultivating a security-aware mindset, and staying informed about security developments.

  ### Operational Security (OpSec)

  This comprehensive framework addresses day-to-day security practices for Web3 teams, covering fundamentals, governance, risk management, control domains, lifecycle management, monitoring, incident response, and continuous improvement.

  ### Wallet Security

  This section delves into the crucial aspect of managing cryptographic keys in Web3 projects, discussing various wallet types (cold vs hot, custodial vs non-custodial), hardware wallets, signing schemes, and software wallets.

  ### External Security Reviews

  This framework provides guidance on conducting and preparing for external security audits and reviews, including setting expectations, preparation, security policies, and vendor selection.

  ### Vulnerability Disclosure

  This section discusses best practices for handling and disclosing vulnerabilities in Web3 projects, including establishing security contacts and managing bug bounty programs.

  ### Infrastructure

  This section covers the fundamental aspects of securing the underlying infrastructure of Web3 projects, including asset inventory, cloud infrastructure, DDoS protection, DNS security, IAM, network security, and zero-trust principles.

  ### Monitoring

  This framework discusses the importance of continuous monitoring in Web3 projects, focusing on setting up effective monitoring systems and defining appropriate thresholds for alerts.

  ### Front-End/Web Application

  This section addresses security considerations specific to the user-facing components of Web3 projects, including both web and mobile application security, common vulnerabilities, and security tools.

  ### Incident Management

  This section outlines protocols for handling security incidents, including communication strategies, detection and response procedures, lessons learned, and playbooks, including specific guidelines for SEAL 911 War Room.

  ### Threat Modeling

  This framework provides guidance on creating and maintaining threat models, as well as identifying and mitigating potential threats to Web3 projects.

  ### Governance

  This section addresses risk management, regulatory compliance, and security metrics for Web3 projects, ensuring proper oversight and control.

  ### DevSecOps

  This framework focuses on integrating security practices into the development and operations processes, covering code signing, CI/CD, IDE security, repository hardening, and security testing.

  ### Privacy

  This section explores tools and practices for maintaining privacy in the Web3 ecosystem, including secure browsing, data removal, digital footprint management, encrypted communication, and privacy-focused operating systems.

  ### Supply Chain

  This framework addresses the security implications of dependencies and third-party components in Web3 projects, including dependency awareness and supply chain levels for software artifacts.

  ### Security Automation

  This section explores ways to automate security processes in Web3 projects, including threat detection and response, compliance checks, and infrastructure as code.

  ### Identity and Access Management (IAM)

  This framework covers best practices for managing user identities and access control in Web3 projects, including role-based access control and secure authentication.

  ### Secure Software Development

  This section focuses on integrating security practices throughout the software development lifecycle, including secure coding standards, code reviews, and secure design principles.

  ### Security Testing

  This framework explores various methods of testing Web3 projects for security vulnerabilities, including dynamic and static application security testing, fuzz testing, and security regression testing.

  ### ENS

  This section covers Ethereum Name Service security considerations, including data integrity, cross-chain compatibility, smart contract integration, interface compliance, and name handling.

  ### Safe Harbor

  This framework provides guidance on establishing safe harbor protocols for security researchers, including key terms, protocols, technical outlines, and whitehat guidelines.

  ### Encryption

  This comprehensive section covers various encryption methods and their applications in protecting data, including cloud data encryption, communication encryption, database encryption, and various types of storage encryption.
</TagProvider>


import { TagList } from '../../../components/tags/TagList'
import { AttributionList } from '../../../components/attribution/AttributionList'
import { TagProvider } from '../../../components/tags/TagContext'
import { TagFilter } from '../../../components/tags/TagFilter'

<TagProvider>
  ## Discord Security

  <TagFilter />

  <TagList tags={frontmatter.tags} />

  ***

  <AttributionList contributors={frontmatter.contributors} />

  > üîë **Key Takeaway for Discord:** To secure your Discord server, focus on implementing robust access controls and enforcing two-factor authentication for all administrators. Regularly audit roles and permissions, and maintain vigilant moderation. Educate your community about security best practices to prevent unauthorized access and protect against potential threats.

  Discord offers a variety of security features that are essential to use. Despite these, users should stay alert to threats like phishing, which can target server moderators. Such threats may appear as QR code scams, fake login screens, or misleading direct messages pretending to be from Discord support.

  To enhance the security of your Discord server, take into account these suggestions. They cover important aspects like server settings, roles and permissions, moderation, bots, channels, invites, member screening, logging, and other security measures.

  ***

  ### Essential Security Measures

  #### Server Settings

  a) **Enable 2FA Requirement for Moderation**

  * Go to Server Settings > Safety Setup > Moderation
  * Toggle on "Require 2FA for moderation"
  * This ensures all moderators have an extra layer of security

  b) **Set Appropriate Verification Level**

  * Go to Server Settings > Safety Setup > Verification Level
  * Choose from: None, Low, Medium, High, Highest
  * Recommended: "Moderate" for public servers (requires users are registered on discord for longer then 5 min.)
  * Higher levels protect against spammers and raids

  c) **Enable Explicit Content Filter**

  * Go to Server Settings > Safety Setup > Content Filter
  * Set to "Scan messages from all members"
  * This automatically blocks messages containing explicit images in non-age-restricted channels
  * Age-restricted channels are exempt from this filter

  d) **Enable Raid Protection and CAPTCHA**

  * Go to Server Settings > Safety Setup > Raid Protection and Captcha
  * Activate all relevant settings to require CAPTCHA for new user actions
  * This protection uses machine learning to detect and block bot-driven join-raids
  * When activated:
    * Sends alerts to a specified channel
    * Requires CAPTCHA verification for new users for one hour after detection

  #### Roles and Permissions

  a) **Implement Role Hierarchy**

  * Go to Server Settings > Roles
  * Create roles like: Cold Admin, Team, Moderator, & Verified.
  * Drag to reorder; higher roles override lower roles
  * Restructure the role hierarchy by dragging roles higher or lower in the roles list:

    * Cold Admin
    * Team
    * Moderator
    * Verified

  b) **Restrict Administrative Permissions**

  * For each role, carefully review the 32 available permissions
  * Key permissions to restrict: Administrator, Manage Webhooks, Manage Server, Manage Roles, & Manage Channels
  * Never give Admin or Kick permissions to anyone you don't fully trust
  * Good permissions for moderators: Manage Channels, Manage Roles, Manage Messages, Ban Members, Delete Messages
  * Good permissions for members: View Channels, View audit logs, Create Invite, Manage Messages, Read Message History, Connect, Speak & Use Voice Activity, & Ban/Kick/Timeout

  c) **Use Channel-Specific Permissions**

  * Right-click on a channel > Edit Channel > Permissions
  * Set custom permissions for roles or members in specific channels

  d) **Use the "View Server as Role" Feature**

  * Go to Server Settings > Roles > Select a role > View Server as Role
  * This allows you to see what members with a certain role can see and access

  ### Advanced Security Measures

  #### Moderation

  a) **Set Up Auto-Moderation Rules**

  * Go to Server Settings > AutoMod
  * Set up rules for: Spam, Harmful Links, Mention Spam, Inappropriate Words
  * Configure custom keyword filters and exempted roles
  * Customize the response to spam, like blocking the message, sending an alert, or timing out the member
  * Add to the existing automod rule to block keywords in a users name, and put Support, Bot, Admin, Tech, Helpdesk, etc.

  b) **Configure Timeout Duration**

  * Go to Server Settings > Safety Setup > Timeout
  * Set default duration (e.g., 60 minutes)
  * Educate moderators on using timeouts effectively

  c) **Establish Clear Server Rules**

  * Create a #rules channel
  * Use Discord's built-in rules screening feature
  * Include sections on: Behavior, Content, Moderation Actions, Appeals Process

  #### Extra Moderation Best Practices

  a) **Leverage "Default Notifications to Mentions Only"**

  * Go to **Server Settings > Overview** and set **Default Notifications** to **Mentions Only**.
  * Reduces potential spam notifications for members, making them more vigilant about suspicious or phishing content.

  b) **Stay Alert to New Features & Potential Exploits**

  * Keep track of newly introduced features such as Threads, Scheduled Events, or Stage Channels.
  * Configure their permissions carefully (e.g., who can start or join a Thread) to prevent abuse by spammers or scammers.

  c) **Regularly Check Third-Party Bot Security**

  * Ensure bots are from reputable sources and receive frequent updates.
  * Review bot permissions after each significant update to avoid newly introduced vulnerabilities.

  #### Bots

  a) **Audit Bot Permissions**

  * Go to Server Settings > Integrations
  * Review each bot's permissions
  * Remove unnecessary permissions
  * Remove permissions for bots that ask for Admin or other permissions that aren't needed, use least privilege with permissions at the role level and channel level.

  b) **Remove Unnecessary Bots**

  * Uninstall any bots that aren't actively used or needed

  c) **Implement Security/Moderation Bots**

  * Consider bots like:
    * Dyno for advanced moderation and logging
    * Carl-bot for reaction roles and custom commands
    * Set up security Bots

  #### Security-Specific Bots

  Various third-party Discord bots offer valuable security and protection features, facilitating automated moderation for your server. In the sections below, we'll explore different categories of security bots and highlight popular options for each category.

  ##### Anti-Impersonation Bots

  Set up custom rules to prevent other users from joining using the same username and PFP (profile picture) to impersonate you or other important members of the server. A popular bot in this category is Wick Bot.

  ##### Anti-Raid Bots

  to prevent spam bots from joining your server all at once, an attack known as raiding, you can also set up bots with particular rules. Beemo is a good example of a bot in this category.

  ##### Anti-Nuke Bots

  This is a monitoring system to observe and note any changes (spontaneous or planned) that take place in your discord server. Some key observation markers are channel and role creation/deletions, banning or kicking members, and webhook creation/deletion.

  ##### Moderation & Link Whitelisting Bots

  Only allows approved links to be used in the discord server. A popular bot in this category is Goodknight Bot.

  *The bots above are not all-inclusive but rather a recommended list of bots to help protect your Discord server in these categories.*

  ### Enhanced Server Configuration

  #### Channels

  a) **Organize Channels Logically**

  * Use categories to group related channels
  * Suggested categories: Information, General, Voice Channels, Topic-Specific

  b) **Set Slow Mode Where Needed**

  * Channel Settings > Overview > Slow Mode
  * Set appropriate cooldown (e.g., 5-30 seconds) for busy channels

  c) **Use Age-Restricted Channels Appropriately**

  * Channel Settings > Overview > Age-Restricted Channel
  * Enable for channels with mature content

  #### Invites

  a) **Disable Permanent Invites**

  * Server Settings > Invites
  * Un-check "Allow anyone with administrative permissions to create invites"

  b) **Set Invite Expiration and Usage Limits**

  * When creating an invite: Set "Expire After" and "Max Number of Uses"
  * Recommended: 24 hours expiration, 50-100 uses

  c) **Regularly Audit Active Invites**

  * Server Settings > Invites
  * Review and delete unnecessary or old invites

  #### Member Screening

  a) **Enable Membership Screening**

  * Server Settings > Safety Setup > Membership Screening
  * Toggle on "Enable Membership Screening"

  b) **Set Up Screening Questionnaire**

  * Add questions about server rules, age verification, etc.
  * Require members to agree to rules before joining

  c) **Set Up Membership Requirements**

  * Require users to react to a message or post an introduction
  * This helps filter out bots and spam accounts from joining

  #### Logging

  a) **Enable Audit Logs**

  * Ensure admin/mod roles have "View Audit Log" permission

  b) **Set Up a Private Logging Channel**

  * Create a private channel visible only to admins/mods
  * Use a logging bot like Logger or Dyno to send detailed logs

  ### Best Practices & Administrative Security

  #### Regular Reviews

  a) **Conduct Periodic Permission Audits**

  * Monthly: Review all role permissions
  * Use a spreadsheet to track changes and justifications

  b) **Review and Update Server Rules**

  * Quarterly: Assess if rules need updating
  * Announce any changes in a dedicated announcements channel

  c) **Check for Unused Channels/Roles**

  * Bi-annually: Delete or archive inactive channels
  * Remove roles that are no longer needed

  #### Cold Admin Accounts

  a) **Set Up a "Cold" Admin Account**

  * Create a new account on a separate device never used for chatting or clicking links
  * This account is highly resistant to phishing and provides an extra layer of security for the server owner

  b) **Secure the Cold Account**

  * Create a new email account for the cold account
  * Factory reset the device used for this account

  c) **Use the Cold Account for Critical Actions**

  * Manage bots, modify server settings, and respond to compromises
  * Never use this account for regular server activities

  d) **Disable QR Code Login on Cold Device**

  * In **User Settings > Privacy & Safety**, deselect any quick login or QR scan options.
  * Prevents attackers from using QR phishing tactics to hijack this high-privilege account.

  #### Additional Community Features

  a) **Enable the Community Feature (Newer Discord Update)**

  * Go to **Server Settings > Community** to activate the Community Feature.
  * Unlocks tools like membership screening, server insights, welcome screen, and discovery settings.
  * Helps maintain a structured, secure environment by surfacing official rules and critical info to newcomers.

  b) **Review Updated Discord Moderation Resources**

  * Consult the official [Discord Moderator Academy](https://discord.com/moderation) for ongoing best practices and new features.
  * Implement recommended strategies (e.g., improved spam filters, updated role recommendations).

  ### Platform-Specific Security Considerations

  #### Additional Security Measures

  a) **Verification Systems**

  * Implement a verification bot like Wick
  * Require users to complete an in-channel captcha before accessing the server
  * Advance Settings: Have verification bot filter based on account age, PFP set, and timeout for incomplete captcha

  b) **Raid Protection**

  * Use anti-raid bots like Wick or Dyno
  * Configure automatic lock-down settings for suspicious activity

  c) **Privacy Settings**

  * Server Settings > Privacy Settings
  * Disable "Allow direct messages from server members"

  d) **Integration Whitelisting**

  * Server Settings > Integrations > Allow new integrations to be added by:
  * Set to "Only Administrators" to prevent unauthorized bot additions

  e) **Server Insights**

  * Enable Server Insights for detailed analytics
  * Use this data to inform moderation strategies and server improvements

  f) **Backup Systems**

  * Use a bot like ServerBackup to regularly backup your server configuration
  * Store backups securely off-platform

  g) **Audit New Integration/Link Safety Settings**

  * Regularly review **Server Settings > Integrations** for newly added apps or link shorteners.
  * Disable suspicious integrations or automate link scanning with a bot that checks URLs against known phishing databases.

  h) **Enable Safe Direct Messaging for All Users**

  * In **User Settings > Privacy & Safety**, select **Keep Me Safe** for direct messages.
  * Encourages moderators and community members to adopt the same setting to minimize phishing DMs.

  ### Additional Resources

  * [Securing Your Server - Discord](https://discord.com/community/securing-your-server)
  * [Four Steps for a Super Safe Server - Discord](https://discord.com/safety/360043653152-four-steps-to-a-super-safe-server)
  * [How to setup a Discord server securely](https://www.ledger.com/academy/basic-basics/launch-a-crypto-project-securely/how-to-set-up-a-crypto-project-discord-server-securely)

  ***
</TagProvider>


import { TagList } from '../../../components/tags/TagList'
import { AttributionList } from '../../../components/attribution/AttributionList'
import { TagProvider } from '../../../components/tags/TagContext'
import { TagFilter } from '../../../components/tags/TagFilter'

<TagProvider>
  <TagFilter />

  ## Community Management

  <TagList tags={frontmatter.tags} />

  <AttributionList contributors={frontmatter.contributors} />

  Communities might be the key of many Web3 projects, but they also represent a significant security challenge. From casual users to top-level executives, everyone within an organization can be targeted by social engineering tactics across platforms like Telegram, Discord, X (formerly Twitter), Google, and more. When a community channel is compromised‚Äîwhether by phishing, fraudulent links, or account takeovers‚Äîit can quickly become a vehicle for wider attacks, putting both users and organizational reputations at risk.

  Here, we present essential best practices to safeguard your community. In the following sections, we will explore platform-specific recommendations in more depth.

  ***

  ### Best Practices for Community Security

  #### üîê Strong Passwords and Two-Factor Authentication (2FA)

  * **Use unique, complex passwords** for each service and store them securely in a reputable password manager. Refer to the Operational Security Framework and Wallet Security Framework for more information on this.
  * **Secure the email account** linked to your community platforms with a unique password and 2FA.
  * **Always enable 2FA**. Prefer hardware-based tokens (e.g., Yubikey) or mobile authenticator apps over SMS-based methods, which are vulnerable to SIM-swapping.
  * If you use an **authenticator app** like Authy, 1Password, or Aegis to generate time-based one-time passwords (TOTP). Ensure that the secret keys are stored encrypted and protected with robust security measures.
  * **Configure your app** to require a password, PIN, or biometric authentication (e.g., fingerprint or face recognition) to unlock access to the tokens. This prevents unauthorized access and ensures the tokens remain secure even if someone gains physical or remote access to your device.
  * **Keep password generation and 2FA codes separate**; do not use your password manager to generate 2FA codes. Otherwise, if the password manager is compromised, it could render the 2FA ineffective, allowing unauthorized access to your accounts.
  * **Encourage community members** to adopt these practices as well.

  #### üé£ Phishing Awareness

  * **Educate members** on recognizing and reporting phishing attempts.
  * **Clearly communicate** to community members that your team will never send the first direct message to them. This is important because attackers often impersonate team members and initiate direct messages to trick users into believing they are legitimate, thereby gaining their trust and potentially compromising their security.
  * **Publicly define all official communication channels** used by your organization.

  Refer to the [Security Awareness framework](/awareness/overview) to learn more about social engineering techniques and security training best practices.

  #### üîí Operational Security (OpSec)

  * **Be mindful of the devices** you use to manage community channels. Malware or compromised hardware can give attackers an entry point.
  * **Regularly update software**, run antivirus checks, and avoid installing untrusted applications that may compromise your security.

  For a comprehensive understanding of Operational Security, including additional strategies and guidelines, please refer to the dedicated Operational Security framework.

  #### üö® Emergency Response Plan

  * **Prepare a clear protocol** for handling security incidents, including how to quickly remove compromised accounts and warn community members.
  * **Adopt a proactive mindset**: it's not a matter of if but when a breach will occur. Having a plan in place helps you act decisively and contain damage.

  As part of the communication team, it is crucial to know when and how to communicate effectively during an incident. This involves understanding the appropriate timing and messaging to ensure clarity and prevent misinformation. For more insights on where this role fits within an incident, refer to the Incident Management framework.

  ### Platform-Specific Security

  #### Discord Security

  * Configure server permissions carefully
  * Use verification bots and moderation tools
  * Monitor for suspicious link sharing
  * Implement role-based access controls

  #### Twitter/X Security

  * Enable advanced security features
  * Monitor for impersonation accounts
  * Use Twitter's official verification systems
  * Be cautious of direct message requests

  #### Telegram Security

  * Use admin permissions judiciously
  * Monitor for spam and scam messages
  * Enable two-step verification
  * Be careful with forwarded messages

  #### Google Workspace Security

  * Implement organizational policies
  * Use advanced security features
  * Monitor sharing permissions
  * Regular security audits

  ### Community Guidelines

  #### Clear Communication Policies

  ‚úÖ **Official Channels Only**: Define which channels are official\
  ‚úÖ **No DMs First**: Team never initiates direct messages\
  ‚úÖ **Verification Process**: How to verify team members\
  ‚úÖ **Reporting System**: How to report suspicious activity

  #### Content Moderation

  ‚úÖ **Link Verification**: All shared links must be verified\
  ‚úÖ **File Scanning**: Scan all uploaded files\
  ‚úÖ **Spam Detection**: Automated spam detection systems\
  ‚úÖ **Regular Audits**: Periodic security reviews

  \:::warning Critical Reminder
  Your community is only as secure as its weakest link. Regular education and proactive security measures are essential for maintaining a safe environment for your users.
  \:::

  ### Quick Response Checklist

  When a security incident occurs:

  1. **üîí Secure**: Immediately restrict access to compromised accounts
  2. **üö® Alert**: Notify the community through official channels
  3. **üîç Investigate**: Determine the scope and method of compromise
  4. **üì¢ Communicate**: Provide clear, accurate information to the community
  5. **üõ°Ô∏è Strengthen**: Implement additional security measures
  6. **üìö Learn**: Document the incident and improve procedures

  Remember: **Speed and transparency** in incident response help maintain community trust while minimizing damage.

  ***
</TagProvider>


import { TagList } from '../../../components/tags/TagList'
import { AttributionList } from '../../../components/attribution/AttributionList'
import { TagProvider } from '../../../components/tags/TagContext'
import { TagFilter } from '../../../components/tags/TagFilter'

<TagProvider>
  <TagFilter />

  ## Twitter Security

  <TagList tags={frontmatter.tags} />

  ***

  <AttributionList contributors={frontmatter.contributors} />

  > üîë **Key Takeaway for Twitter (X):** To secure your Twitter account, prioritize using an authenticator app or security key over SMS-based 2FA, remove your phone number, and regularly review third-party app permissions. Ensure your recovery settings are robust and frequently monitor account activity to safeguard your online presence and maintain community trust.

  A compromised **X** account can harm not only you but also your community. Attackers often use phishing tactics‚Äîlike SIM swaps or fake login screens‚Äîto seize control of your profile. A few simple steps can significantly reduce these risks.

  Securing your Twitter account is not particularly hard or time consuming, so consider following the best practices below.

  ### Essential Security Measures

  #### Remove your phone number

  There are no good reasons to keep a phone number attached to your account, and it's the easiest way for a hacker to get into your account after SIM swapping you. Getting verified requires you to add a phone number, but you can remove it afterward.

  1. **Go to:** [Phone Settings](https://x.com/settings/phone)
  2. **Remove:** Click **Delete phone number** if one is listed.

  After removing your phone number, it's crucial to navigate to Settings > Security and Account Access > Security > Two-Factor Authentication > Backup Codes. Store these codes offline, just like your seed phrase. Anyone with these codes can bypass your 2FA, so it's extremely important to write them down and keep them secure. Remember, when you change your password, new backup codes are generated.

  #### Configure 2FA

  Two-factor authentication is a great way to keep hackers at bay, but it's not foolproof if you're relying on SMS 2FA and someone gets hold of your phone number. It's generally better to use an authenticator app or a security key. Also, ensure your backup codes are stored safely, ideally printed on paper rather than saved on your device.

  1. **Go to:** [Login Verification](https://x.com/settings/account/login_verification)
  2. **Disable:** Un-check **Text message**
  3. **Enable:** Choose **Authentication app** and/or **Security key**
     1. If using an authentication app, store your secret (TOTP) in a reliable app (Authy, Google Authenticator), but disable [syncing](https://retool.com/blog/mfa-isnt-mfa) for added security.
     2. If using security keys, keep at least two (e.g., from [Yubico](https://www.yubico.com/)) in case one fails.
  4. Under **Additional methods**, below, select **Backup codes** and create a new backup code. Store this code securely, offline, ideally in a physical format like a printout, to ensure that if one device is compromised, the code remains safe.

  #### Enable password reset protect

  Twitter provides a feature that requires users to input their email or phone number linked to the account before they can initiate a password reset. This adds an extra layer of security by ensuring that hackers must know your email, rather than receiving a hint.

  1. **Go to:** [Security Settings](https://x.com/settings/security)
  2. **Toggle On:** Check **Password reset protect**.

  ### Advanced Security Measures

  #### Revoke access from delegated accounts

  It's possible to allow other accounts to access your Twitter account. If your account was previously compromised, attackers could exploit this feature to maintain access even after you've regained control.

  1. **Go to:** [Delegate Members](https://x.com/settings/delegate/members)
  2. **Review:** Remove any unfamiliar accounts.

  #### Revoke access from unnecessary apps

  It's possible that you've linked your Twitter account to several apps, and some might have more permissions than necessary. To check and manage these permissions, follow these steps:

  1. **Go to:** [Connected Apps](https://x.com/settings/connected_apps)
  2. **Review:** Check each app's permissions and **Revoke** if it's no longer needed or trusted.

  #### Log Out of Unnecessary Sessions

  It's possible you've accessed Twitter from devices you don't regularly use, like a friend's phone. Review your active sessions and log out of any that are unfamiliar or unnecessary.

  Old sessions on unfamiliar devices can be risky.

  1. **Go to:** [Sessions](https://x.com/settings/sessions)
  2. **Log Out:** For any device or session you don't recognize.

  #### Verify Your Email is Current

  If you've changed your email since creating your Twitter account, ensure your current email is linked to receive security alerts and updates.

  1. **Go to:** [Email Settings](https://x.com/settings/email)
  2. **Confirm:** Update to your current email if needed.

  #### Refresh Your Password

  Using a unique password for Twitter is crucial. If you haven't set one, now is the time to do so.

  1. **Go to:** [Password Settings](https://x.com/settings/password)
  2. **Change:** Select a long, complex password.

  ### Best Practices & Additional Tips

  * **Disable Email and Phone Discoverability**
    * **Go to:** [Discoverability and Contacts](https://x.com/settings/contacts)
    * It is recommended to turn both email and phone discoverability off.

  * **Privacy & Safety Settings:**
    * In [Privacy & Safety](https://x.com/settings/privacy_and_safety), consider disabling "Allow message requests from everyone" to limit spam DMs and phishing attempts and enabling "Filter low-quality messages".

  * **Monitor for Suspicious Alerts:**
    * X (Twitter) may notify you about unusual activity. If you suspect a breach, log out of all sessions, revoke suspicious apps, and change your password immediately.

  * **Use Unique Recovery Methods:**
    * If you choose to use a recovery phone number, which we generally strongly advise against, make sure it isn't your main mobile number. Instead, use a separate VoIP or alternative line to minimize the risk of SIM swapping.

  * If you received an email about any content moderation, login, or any email from "X"; ensure the email is from "@x.com"

  ***
</TagProvider>

